{"ast":null,"code":"var _jsxFileName = \"/Users/gavinlynch04/Desktop/csc307_receipt_app/packages/frontend/src/Table.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./CSS Files/Table.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TableHeader() {\n  return /*#__PURE__*/_jsxDEV(\"thead\", {\n    className: \"header\",\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      className: \"headerRow\",\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        className: \"header1\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        className: \"header2\",\n        children: \"Quantity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        className: \"header3\",\n        children: \"Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        className: \"header4\",\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n_c = TableHeader;\nfunction TableBody(props) {\n  _s();\n  const {\n    buttonLabels\n  } = props;\n  const [buttonColors, setButtonColors] = useState(Array(buttonLabels.length).fill('lightblue'));\n  const initialStates = buttonLabels.map(() => ({\n    clicked: false\n  }));\n  /*const initialRowStates = props.jsonData.map(() => {\n      return buttonLabels.map(() => ({ clicked: false }));\n  });*/\n\n  //const [rowButtonStates, setRowButtonStates] = useState(initialRowStates);\n  const [buttonStates, setButtonStates] = useState(buttonLabels.map(() => ({\n    clicked: false\n  })));\n  const handleButtonClick = button => {\n    const newButtonStates = [...buttonStates];\n    newButtonStates[button].clicked = !newButtonStates[button].clicked;\n    setButtonStates(newButtonStates);\n\n    /*const newButtonStates = [...rowButtonStates];\n    newButtonStates[row][col].clicked = !newButtonStates[row][col].clicked;\n    setRowButtonStates(newButtonStates);\n     setRowButtonStates(prevStates => {\n        const newButtonStates = [...prevStates];\n        newButtonStates[row][col].clicked = !newButtonStates[row][col].clicked;\n        return newButtonStates;\n    });\n    setRowButtonStates(prevStates => {\n        const newButtonStates = [...prevStates];\n        newButtonStates[row] = [...prevStates[row]]; // Ensure the row is cloned\n        newButtonStates[row][col] = {\n            ...prevStates[row][col],\n            clicked: !prevStates[row][col].clicked\n        };\n        return newButtonStates;\n    });*/\n  };\n\n  const rows = props.jsonData.map((row, rowIndex) => {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      className: \"contentRows\",\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"col1\",\n        children: row.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"col2\",\n        children: row.quantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"col3\",\n        children: row.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"col4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-table\"\n          },\n          children: buttonLabels.map((label, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"tableButton\",\n            style: {\n              backgroundColor: buttonStates[i].clicked ? 'blue' : 'lightblue'\n            },\n            onClick: () => handleButtonClick(i),\n            children: label\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)]\n    }, rowIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: rows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_s(TableBody, \"NFoSdVIPcEtLoRsFQzfZ3UeN6j0=\");\n_c2 = TableBody;\nfunction clicked(button) {\n  button.style.backgroundColor = 'navy';\n}\nfunction Table(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(TableHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        jsonData: props.jsonData,\n        buttonLabels: props.buttonLabels\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n_c3 = Table;\nexport default Table;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TableHeader\");\n$RefreshReg$(_c2, \"TableBody\");\n$RefreshReg$(_c3, \"Table\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TableHeader","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","TableBody","props","_s","buttonLabels","buttonColors","setButtonColors","Array","length","fill","initialStates","map","clicked","buttonStates","setButtonStates","handleButtonClick","button","newButtonStates","rows","jsonData","row","rowIndex","description","quantity","total","style","display","label","i","backgroundColor","onClick","_c2","Table","_c3","$RefreshReg$"],"sources":["/Users/gavinlynch04/Desktop/csc307_receipt_app/packages/frontend/src/Table.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./CSS Files/Table.css\"\n\n\nfunction TableHeader() {\n    return (\n        <thead className={\"header\"}>\n        <tr className={\"headerRow\"}>\n            <th className={\"header1\"}>Name</th>\n            <th className={\"header2\"}>Quantity</th>\n            <th className={\"header3\"}>Price</th>\n            <th className={\"header4\"}>Users</th>\n        </tr>\n        </thead>\n    );\n}\n\n\n\n\nfunction TableBody(props) {\n    const { buttonLabels } = props;\n\n    const [buttonColors, setButtonColors] = useState(Array(buttonLabels.length).fill('lightblue'));\n\n    const initialStates = buttonLabels.map(() => ({ clicked: false }));\n    /*const initialRowStates = props.jsonData.map(() => {\n        return buttonLabels.map(() => ({ clicked: false }));\n    });*/\n\n    //const [rowButtonStates, setRowButtonStates] = useState(initialRowStates);\n    const [buttonStates, setButtonStates] = useState(buttonLabels.map(() => ({ clicked: false })));\n\n    const handleButtonClick = (button) => {\n        const newButtonStates = [...buttonStates];\n        newButtonStates[button].clicked = !newButtonStates[button].clicked;\n        setButtonStates(newButtonStates);\n\n        /*const newButtonStates = [...rowButtonStates];\n        newButtonStates[row][col].clicked = !newButtonStates[row][col].clicked;\n        setRowButtonStates(newButtonStates);\n\n        setRowButtonStates(prevStates => {\n            const newButtonStates = [...prevStates];\n            newButtonStates[row][col].clicked = !newButtonStates[row][col].clicked;\n            return newButtonStates;\n        });\n        setRowButtonStates(prevStates => {\n            const newButtonStates = [...prevStates];\n            newButtonStates[row] = [...prevStates[row]]; // Ensure the row is cloned\n            newButtonStates[row][col] = {\n                ...prevStates[row][col],\n                clicked: !prevStates[row][col].clicked\n            };\n            return newButtonStates;\n        });*/\n    };\n\n    const rows = props.jsonData.map((row, rowIndex) => {\n            return (\n                <tr key={rowIndex} className={\"contentRows\"}>\n                    <td className={\"col1\"}>{row.description}</td>\n                    <td className={\"col2\"}>{row.quantity}</td>\n                    <td className={\"col3\"}>{row.total}</td>\n                    <td className={\"col4\"}>\n                        <div style={ {display: \"inline-table\"} }>\n                            {buttonLabels.map((label, i) => (\n                                <button\n                                    key={i}\n                                    className={\"tableButton\"}\n                                    style={{\n                                        backgroundColor: buttonStates[i].clicked ? 'blue' : 'lightblue'\n                                    }}\n                                    onClick={() => handleButtonClick(i)}\n                                >\n                                    {label}\n                                </button>\n                            ))}\n                        </div>\n                        </td>\n                </tr>\n            );\n        }\n    );\n    return (\n        <tbody>\n        {rows}\n        </tbody>\n    );\n}\n\nfunction clicked(button) {\n    button.style.backgroundColor = 'navy';\n}\n\n\nfunction Table(props) {\n\n    return (\n        <div className={\"container\"}>\n            <table>\n                <TableHeader />\n                <TableBody jsonData={props.jsonData} buttonLabels={props.buttonLabels}/>\n            </table>\n        </div>\n    );\n}\nexport default Table;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}